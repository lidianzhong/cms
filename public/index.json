[{"content":" 介绍目前全球知名的四足机器人研究组织和相关的机器人和四足机器人总体概述\n四足机器人发展现状 波士顿动力公司（Boston Dynamics） 相关机器人：Altas、Stretch、Spot\n麻省理工学院 Biomimetic Robotics Lab 相关机器人：MIT Cheetah、MIT Mini Cheetah\n苏黎世联邦理工学院（ETH Zurich） 相关机器人：ANYmal\n宇树科技（Unitree Robotics）（国内） 相关机器人：Laikago、Aliengo、A1、Go1、Go2\n四足机器人的组成 动力系统 + 控制系统 + 通信系统 + 能源系统\n动力系统：核心是机器人关节电机，需要能够对关节力矩和角度进行精确控制。\n控制系统： 重点是控制算法，比如规划器和运动控制器，能够根据目标路径计算出各个关节需要执行的命令\n通信系统：各个关节电机、传感器、遥控手柄的通信\n能源系统：使用电池或者外部直流电源进行供电\n","permalink":"https://lidianzhong.gitee.io/posts/robot/robot_book/1_overview/","summary":"介绍目前全球知名的四足机器人研究组织和相关的机器人和四足机器人总体概述 四足机器人发展现状 波士顿动力公司（Boston Dynamics） 相关机器人：Altas、Stretch、Spot 麻省理工学院 Biomimetic Robotics Lab 相关机器人：MIT Cheetah、MIT Mini Cheetah 苏黎世联邦理工学院（ETH Zuric","title":"四足机器人概述"},{"content":"ROS与Gazebo ROS 中将每一个进程视作一个节点（Node），节点之间的通信方式依靠：话题（Topic）、服务（Service）、参数（Parameter）。\n控制器（Controller）与仿真（Gazebo）就是两个节点，利用 topic通信。\n过程是：控制器从Gazebo读取机器人各个关节角度、角速度、IMU等数值，然后计算出控制量，如目标力矩、目标关节角度等发送给Gazebo。\n面向对象设计 面向对象的程序设计的三大特性为：封装、继承、多态。\n想象以下的场景：有一个控制器，想要它既可以与仿真环境Gazebo交互，也可以和实际的机器人交互。如何实现？\n封装：将控制器与ROS交互接口的收发功能进行封装，用类中的一个方法加以实现。\n继承：针对仿真模型和真实机器人的两个接口类，IOROS类和IOSDK类。它们用不同的方法完成同一个任务，即收发数据。因此他们有相同的共性，我们可以将这个共性提取到IOInterface类，都用到的函数设定为纯虚函数。\n多态：现在有了两个接口，通过将父类（IOInterface）的指针赋值为IOROS或IOSDK指针的值，可以方便地完成控制器在仿真平台到真实机器人的切换。\n有限状态机 有限状态机不是一个真实的硬件，而是抽象的概念。利用有限状态机可以实现控制器中对各个状态的切换。比如从阻尼模式切换到站立模式。\n有限状态机有五种状态（阻尼模式、固定站立、自由站立等），两种任务。任务一是重复当前运行状态（即重复执行当前状态的run函数），任务二是切换状态。\n实现：让机器人站起来 机器人的关节控制 前面说了如何发送命令给单个电机，以控制电机或读取状态，现在考虑给机器人的12个电机发送电机命令和接收状态。\n相关的类是 FSMState.h，它是有限状态机四个状态的基类，每个状态继承了下面变量：\nCtrlComponents *_ctrlComp;\t// 包含大多数控制所需的类与状态变量 LowlevelCmd *_lowCmd;\t// 发送给各个电机的命令 LowlevelState *_lowState;\t// 从各个电机接收的状态 四足机器人有四条腿，同时每个腿有三个关节。关节顺序是这样定义的：\n每一条腿，自上而下的三个关节为机身关节、大腿关节、小腿关节，顺序分别为 0、1、2。 四条腿，按照右前腿、左前腿、右后腿、左右腿的顺序排列。 0:0 号腿 0 号关节，即右前腿机身关节 1:0 号腿 1 号关节，即右前腿大腿关节 2:0 号腿 2 号关节，即右前腿小腿关节 3:1 号腿 0 号关节，即左前腿机身关节 4:1 号腿 1 号关节，即左前腿大腿关节 5:1 号腿 2 号关节，即左前腿小腿关节 6:2 号腿 0 号关节，即右后腿机身关节 7:2 号腿 1 号关节，即右后腿大腿关节 8:2 号腿 2 号关节，即右后腿小腿关节 9:3 号腿 0 号关节，即左后腿机身关节 10:3 号腿 1 号关节，即左后腿大腿关节 11:3 号腿 2 号关节，即左后腿小腿关节 机器人的阻尼模式 出于安全考虑，一般机器人在开机时默认进入阻尼模式（Passive）。\n阻尼模式的代码src/FSM/State_Passive.cpp：\nvoid State_Passive::enter(){ if(_ctrlComp-\u0026gt;ctrlPlatform == CtrlPlatform::GAZEBO){ for(int i=0; i\u0026lt;12; i++){ _lowCmd-\u0026gt;motorCmd[i].mode = 10; _lowCmd-\u0026gt;motorCmd[i].q = 0; _lowCmd-\u0026gt;motorCmd[i].dq = 0; _lowCmd-\u0026gt;motorCmd[i].Kp = 0; _lowCmd-\u0026gt;motorCmd[i].Kd = 8; _lowCmd-\u0026gt;motorCmd[i].tau = 0; } } else if(_ctrlComp-\u0026gt;ctrlPlatform == CtrlPlatform::REALROBOT){ for(int i=0; i\u0026lt;12; i++){ ...... } } _ctrlComp-\u0026gt;setAllSwing(); } void State_Passive::run(){ } void State_Passive::exit(){ } 可以看到，代码对在仿真平台和真实机器人进行了不同的设定。各个参数的设置放置在了 函数enter中，意味着只有在有限状态机进入阻尼模式时，LowLevelCmd 才修改一次。而 run 和 exit 均为空函数，说明不进行其它操作。但是有限状态机在运行时会不停地发送LowLevelCmd给电机，所以机器人会持续收到阻尼模式的命令。\n在有限状态机中，添加了自动保护功能。checkSafty 函数进行了机身姿态的判断。当checkSafty 返回 false 时，会让机器人的所有关节进入阻尼模式。\n机器人各个关节的坐标系与零角度点 机器人的每个关节需要一个坐标系和零角度点来确定位置和角度\n机器人上所有的坐标系都是右手系，且互相平行。坐标系的 x 轴朝向机器人的前方，y 轴朝向机器人的左侧，z 轴竖直向上。\n机身关节的旋转轴为 x 轴，大腿关节和小腿关节为 y 轴，旋转正方向符合右手定则，使用弧度制。\n这样就可以用数值来表示一个特定的关节状态了。比如机器人站立的状态就可以表示为：\n机身关节：0.00 大腿关节：0.67 小腿关节：-1.30 于是我们就可以在代码中设定目标关节角度：\nfloat_targetPos[12] = {0.0, 0.67, -1.3, 0.0, 0.67, -1.3, 0.0, 0.67, -1.3, 0.0, 0.67, -1.3}; 机器人的固定站立模式 知道了机器人的目标角度，如何实现机器人的固定站立呢？\n对函数 enter、run、exit进行考虑：\n在 enter 函数中，首先将每个关节的期望值设定好，然后再更新最初姿态的变量\nvoid State_FixedStand::enter(){ for(int i=0; i\u0026lt;4; i++){ if(_ctrlComp-\u0026gt;ctrlPlatform == CtrlPlatform::GAZEBO){ _lowCmd-\u0026gt;setSimStanceGain(i);\t// 设置关节期望值 } else if(_ctrlComp-\u0026gt;ctrlPlatform == CtrlPlatform::REALROBOT){ _lowCmd-\u0026gt;setRealStanceGain(i); } _lowCmd-\u0026gt;setZeroDq(i);\t// 设置关节期望值 _lowCmd-\u0026gt;setZeroTau(i);\t// 设置关节期望值 } for(int i=0; i\u0026lt;12; i++){ _lowCmd-\u0026gt;motorCmd[i].q = _lowState-\u0026gt;motorState[i].q; _startPos[i] = _lowState-\u0026gt;motorState[i].q;\t// 设定初始姿态 } _ctrlComp-\u0026gt;setAllStance(); } 在 run 函数中，使用线性插值来完成从最初状态到目标姿态的过渡，每运行一次越靠近目标姿态\nvoid State_FixedStand::run(){ _percent += (float)1/_duration; _percent = _percent \u0026gt; 1 ? 1 : _percent; for(int j=0; j\u0026lt;12; j++){ _lowCmd-\u0026gt;motorCmd[j].q = (1 - _percent)*_startPos[j] + _percent*_targetPos[j]; } } 在 exit 函数中，将 _percent 设置为 0，这样再次切换到站立模式，才能正常运行。\n","permalink":"https://lidianzhong.gitee.io/posts/robot/robot_book/3_ji_qi_ren_fang_zhen_yu_kong_zhi_kuang_jia/","summary":"ROS与Gazebo ROS 中将每一个进程视作一个节点（Node），节点之间的通信方式依靠：话题（Topic）、服务（Service）、参数（Parameter）。 控制器（Controller）与仿真（Gazebo）就是两个节点，利用 topic通信。 过程是：控制器从Gazebo读取机器","title":"机器人仿真与控制框架"},{"content":"安装问题 无法解析的服务器名称，Error code: Wsl/WININET_E_NAME_NOT_RESOLVED PS C:\\Users\\DianzhongLi\u0026gt; wsl --list --online 无法从“https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json”中提取列表分发。无法解析服务器的名称或地址 Error code: Wsl/WININET_E_NAME_NOT_RESOLVED 解决方法：\n使用代理或者VPN 在 hosts 中指定 raw.githubusercontent.com 的对应ip 安装 WSL 报错 Error code: Wsl/WININET_E_NAME_NOT_RESOLVED 问题解决-CSDN博客\n","permalink":"https://lidianzhong.gitee.io/posts/tools/wsl2/wsl2_problem/","summary":"安装问题 无法解析的服务器名称，Error code: Wsl/WININET_E_NAME_NOT_RESOLVED PS C:\\Users\\DianzhongLi\u0026gt; wsl --list --online 无法从“https://raw.githubusercontent.com/microsoft/WSL/master/distributions/DistributionInfo.json”中提取列表分发。无法解析服务器的名称","title":"WSL 问题汇总"},{"content":"\rDawn Journey\r在黎明的微光中，我们踏上了一场绚丽的旅程\r👉友链格式\r名称： Dawn Journey 网址： https://lidianzhong.gitee.io/ 图标： https://lidianzhong.gitee.io/img/Q.gif 描述： 在黎明的微光中，我们踏上了一场绚丽的旅程 ","permalink":"https://lidianzhong.gitee.io/links/","summary":"Dawn Journey 在黎明的微光中，我们踏上了一场绚丽的旅程 👉友链格式 名称： Dawn Journey 网址： https://lidianzhong.gitee.io/ 图标： https://lidianzhong.gitee.io/img/Q.gif 描述： 在黎明的微光中，我们踏上了一场绚丽的旅程","title":"🤝友链"},{"content":"Git 命令汇总 1. 分支相关 1.1 查看当前分支\ngit branch 1.2 创建一个新分支并切换到这个分支\ngit checkout -b dev\t# 创建新分支 dev 并切换到它 1.3 切换到某个分支\ngit checkout test\t# 切换到 test 分支 1.4 删除分支\ngit branch -d test\t# 删除 test 分支，如果分支没有被合并，使用 -D 参数强制删除 2. 撤销相关 2.1 撤销最近的一次提交\ngit reset --hard HEAD~1\t# 撤销最近的一次提交 ","permalink":"https://lidianzhong.gitee.io/posts/tools/git/git-command-overall/","summary":"Git 命令汇总 1. 分支相关 1.1 查看当前分支 git branch 1.2 创建一个新分支并切换到这个分支 git checkout -b dev # 创建新分支 dev 并切换到它 1.3 切换到某个分支 git checkout test # 切换到 test 分支 1.4 删除分支 git branch -d test # 删除 test 分支，如果分支没有被合并，使用 -D 参数强制删除 2. 撤销相关 2.1 撤销最近的一次提交 git reset --hard HEAD~1 # 撤销最近的一次提交","title":"Git 命令汇总"},{"content":" 在我们想要将本地的代码提交到Github远程仓库时，会因为网络问题，拉取失败。\n解决Git提交拉取时的网络问题 查询以下网址对应的DNS服务器地址: DNS查询工具 github.com github.global.ssl.fastly.net assets-cdn.github.com 修改 hosts 文件 20.205.243.166 github.com 66.220.148.145 github.global.ssl.fastly.net 185.199.111.153 assets-cdn.github.com # https://tool.chinaz.com/dns/github.com # https://tool.chinaz.com/dns/github.global.ssl.fastly.net # https://tool.chinaz.com/dns/assets-cdn.github.com 解决 Git clone 时的网络问题 加个fast：https://github.com/ 改为 https://githubfast.com/ 使用镜像仓库：Github镜像仓库 ","permalink":"https://lidianzhong.gitee.io/posts/tools/git/solve-git-slow-problem/","summary":"在我们想要将本地的代码提交到Github远程仓库时，会因为网络问题，拉取失败。 解决Git提交拉取时的网络问题 查询以下网址对应的DNS服务器地址: DNS查询工具 github.com github.global.ssl.fastly.net assets-cdn.github.com 修改 hosts 文件 20.205.243.166 github.com 66.220.148.145 github.global.ssl.fastly.net 185.199.111.153 assets-cdn.github.com # https://tool.chinaz.com/dns/github.com # https://tool.chinaz.com/dns/github.global.ssl.fastly.net # https://tool.chinaz.com/dns/assets-cdn.github.com 解决 Git clone 时的网络问题 加个fast：https://github.com/ 改为 https://githubfast.com/ 使用","title":"解决Git同步访问慢的问题"},{"content":" 后续开发的算法，最终结果都是生成发送给这12个关节电机的命令\n四足机器人的动力系统 1. 永磁同步电机（PMSM） 通过控制定子上三个线圈的电流，可以控制电机的力矩和角度。这种控制方法叫做矢量控制（FOC）。\n2. 关节电机的混合控制 关节电机的内部，已经封装了电机底层的控制算法。作为用户，只要给关节电机发送相关的命令，电机就能完成从接收命令到关节力矩输出的工作。\n控制指令有五个：前馈力矩、期望角度位置、期望角速度、位置刚度、速度刚度（阻尼）\n3. 关节电机的命令下发 通过 RS485 接口进行通信，用上位机控制需要使用 USB 转 RS485 转接器。\n4. 使用Python代码控制电机 指定七个参数，分别为id、mode和前面说的5个控制指令（T、W、Pos、K_P、K_W），作为结构体数据。结构体数据先要依据通信协议将数据编码为电机能够接收的格式，然后就能给电机发送命令。电机返回的数据也要通过解码再进行下一步的数据处理。\n电机只有在接收到命令时才会返回当前自身状态，所以如果只是让电机持续运转，那么不需要持续发同一条命令，为了时刻检测电机状态，才需要持续发送命令。\n用结构体中的mode参数来控制电机的控制模式。\n位置模式：电机的输出轴稳定在一个固定的位置；\n速度模式：电机稳定在一个固定的速度，\n阻尼模式：在被外力旋转时，会产生一个抗阻力矩。方向与旋转方向相反，大小与旋转速度成正比；力矩模式，电机输出一个恒定力矩；\n零力矩模式：保持力矩为0，转动输出轴的阻力会明显小于未开机时的阻力；\n混合模式（最常用）：发送前馈力矩、目标角度、目标角速度混合控制。\n5. 移植到其他上位机 根据电机发送的报文格式，通过 RS-485 协议标准，进行串口通信\n","permalink":"https://lidianzhong.gitee.io/posts/robot/robot_book/2_guan_jie_dian_ji/","summary":"后续开发的算法，最终结果都是生成发送给这12个关节电机的命令 四足机器人的动力系统 1. 永磁同步电机（PMSM） 通过控制定子上三个线圈的电流，可以控制电机的力矩和角度。这种控制方法叫做矢量控制（FOC）。 2. 关节电机的混合控制 关节电机的内部，已经封装了电机底层的控制算法。作为用户，只要给","title":"四足机器人关节电机"},{"content":"\n关于我\rDawn Journey\r在黎明的微光中，我们踏上了一场绚丽的旅程\r一首诗\r轮台东门送君去，去时雪满天山路。\r峰回路转不见君，雪上空留马行处。\r本站建于 2024 年 4 月 1 日\n","permalink":"https://lidianzhong.gitee.io/about/","summary":"关于我 Dawn Journey 在黎明的微光中，我们踏上了一场绚丽的旅程 一首诗 轮台东门送君去，去时雪满天山路。 峰回路转不见君，雪上空留马行处。 本站建于 2024 年 4 月 1 日","title":"🙋🏻‍♂️关于"}]